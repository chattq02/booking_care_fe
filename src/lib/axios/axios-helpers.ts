import type { InternalAxiosRequestConfig } from "axios";
import { getCookie } from "@/utils/cookie";
import { COOKIE_KEYS, HEADER_KEYS } from "@/constants";
import { getTimezone } from "@/utils/time";

/**
 * ‚úÖ Th√™m token + header ph·ª• tr∆∞·ªõc m·ªói request (d√πng cho axiosPrivate)
 * - L·∫•y access token t·ª´ cookie
 * - Th√™m ng√¥n ng·ªØ, timezone
 */
export const addTokensBeforeRequest = (
  config: InternalAxiosRequestConfig
): InternalAxiosRequestConfig => {
  try {
    const accessToken = getCookie(COOKIE_KEYS.at);
    const language = getCookie(COOKIE_KEYS.lng) || "vi";
    const timezone = getTimezone();

    // üî• N·∫øu c√≥ access token ‚Üí g·∫Øn Bearer
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }

    // ‚úÖ Th√™m header ph·ª•
    config.headers[HEADER_KEYS.language] = language;
    config.headers[HEADER_KEYS.timezone] = timezone;

    return config;
  } catch (error) {
    console.error("‚ùå addTokensBeforeRequest error:", error);
    return config;
  }
};

/**
 * ‚úÖ Th√™m header c∆° b·∫£n (d√πng cho axiosPublic)
 * - Kh√¥ng th√™m token, ch·ªâ th√™m ng√¥n ng·ªØ + timezone
 */
export const addPublicHeaders = (
  config: InternalAxiosRequestConfig
): InternalAxiosRequestConfig => {
  try {
    const language = getCookie(COOKIE_KEYS.lng) || "vi";
    const timezone = getTimezone();

    config.headers[HEADER_KEYS.language] = language;
    config.headers[HEADER_KEYS.timezone] = timezone;

    return config;
  } catch (error) {
    console.error("‚ùå addPublicHeaders error:", error);
    return config;
  }
};
